name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Adjust the Python version to match your project requirements

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run tests
        env:
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          AZURE_KEY: ${{ secrets.AZURE_KEY }}
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          MFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN: ${{ secrets.MFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}

        run: |
          source venv/bin/activate
          pytest main/tests/views

      - name: Set up SSH key
        if: success()  # Only runs if the previous step was successful
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ARTIFACT_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        if: success()  # Only runs if the previous step was successful
        env:
          USER: ${{ secrets.USER }}
          HOST: ${{ secrets.HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} <<'EOF'
            cd /home/django
            # Remove old project and clone new one
            rm -rf FinanceTracker
            git clone https://github.com/Tovborg/FinanceTracker.git
            cd /home/django/FinanceTracker
            # Create logs folder
            mkdir -p /home/django/FinanceTracker/logs
          
            # Create virtual environment and install requirements
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Create .env file from actions secrets
            touch .env
            echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> .env
            echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> .env
            echo "MFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN=${{ secrets.MFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN }}" >> .env
          
            # Activate venv, run migrations and collect static files
            source venv/bin/activate
            python manage.py migrate
            python manage.py collectstatic --noinput
          
            # Give permissions to logs folder
            sudo chown -R emil:www-data /home/django/FinanceTracker/logs
            sudo chmod -R 775 /home/django/FinanceTracker/logs
            
            # Restart gunicorn and nginx
            sudo systemctl restart gunicorn
            sudo nginx -t && sudo systemctl restart nginx
          EOF
